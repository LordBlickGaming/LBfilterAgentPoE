#!/usr/bin/env python
# -*- encoding: utf-8 -*-
# -*- coding: utf-8 -*-
# -*- tabstop: 4 -*-

from clIniFile_py3 import IniSections, _p, _d as _di, xlist, hh
from os import path as ph, getcwd as pwd, chdir as cd
from clZip import ztree as zt, zunp as zu
from datetime import datetime as dttm
def dt_uiso(iso_txt):
	if not(iso_txt):
		return ''
	if iso_txt[-1].upper()=='Z':
		txt = iso_txt[:-1]
	else:
		txt = iso_txt
	return dttm.fromisoformat(txt).strftime("%Y.%m.%d – %H:%M:%S")


_y = lambda _bool: ('No', 'Yes')[_bool]
_n = '\n'

VERSION = '0.95'
Strictneses = 'Soft', 'Regular', 'Semi-Strict', 'Strict', 'Very-Strict', 'Uber-Strict', 'Uber-Plus-Strict'
Styles = 'Default Azurite Blue CustomSounds Gaia Purple Slick Vaal Velvet'.split()
file_types = 'Zip In Out'.split()
cfgFiles = lambda key: f"{key}FN" if key in file_types else None

class mySinker:
	def __init__(mn):
		mn.uiInit()
		mn.appStart()
		mn.uiConn()
		mn.ui.Enter()

	uiFn = lambda mn, fileName: fileName.replace(ph.expanduser('~'), '~')
	otFn = lambda mn, fileName: fileName.replace('NeverSink', mn.cfg['Main']['ModName'])

	def uiInit(mn):
		from uiMySinker import mySinker_UI
		ui = mn.ui = mySinker_UI(ph.realpath(__file__))
		global _d, _l, _lp
		_d, _l, _lp = mn._d, ui._p, ui._lp

	def _d(mn, *k, **kk):
		return (_lp(*k, **kk) if mn.dbg else _di(*k, **kk))

	go_SetFileNameZip = lambda mn, b: mn.appSetFileName('Zip')
	go_SetFileNameIn = lambda mn, b: mn.appSetFileName('In')
	go_SetFileNameOut = lambda mn, b: mn.appSetFileName('Out')

	def uiConn(mn):
		ui = mn.ui
		handlers = ui.Connections()
		for hn in (dr[3:] for dr in dir(mn) if dr[:3]=='go_'):
			handlers[f"do_{hn}"] = getattr(mn, f"go_{hn}")
		ui.bld.connect_signals(handlers)
		d = ui.opts
		d.PreferencesStore = mn.appNewPreferences
		for ui_pref in d.lsUpdate:
			if mn.cfg['Main'][ui_pref]:
				setattr(d, ui_pref, mn.cfg['Main'][ui_pref])

	def go_Preferences(mn, b):
		ui = mn.ui
		ui.opts.dlgShow(Strictneses, Styles, mn.appLeaguesList)

	def appNewPreferences(mn):
		d =  mn.ui.opts
		for ui_pref in d.lsUpdate:
			mn.cfg['Main'][ui_pref] = getattr(d, ui_pref)
		mn.appUpdateFilenames()

	def go_Debug(mn, check):
		mn.dbg = bool(check.get_active())

	def apiJSON(mn, host, request, secure=False):
		jsonData = None
		import json
		import http.client as htcl
		headers = {
			'Accept' : 'application/json',
			'charset' : 'utf-8',
			'User-agent' : f"LBfilterAgentPoE/{VERSION}"}
		_lp( (("connecting to host „"), (host, 'fnm'),
			("” with request„"), (request, 'fnm'), "”:\n") )
		if secure:
			connWeb = htcl.HTTPSConnection(host)
		else:
			connWeb = htcl.HTTPConnection(host)
		connWeb.request('GET', request, '', headers)
		respWeb = connWeb.getresponse()
		if respWeb.status == 200:
			respBody = respWeb.read()
			jsonData = json.loads(respBody)
		else:
			_l(f"Error:{respWeb.status} - {respWeb.reason}\n", 'err')
		connWeb.close()
		return jsonData

	def githubJSON(mn, user, repo):
		host, request = 'api.github.com', f"/repos/{user}/{repo}/releases/latest"
		return mn.apiJSON(host, request, True)

	def appLeaguesList(mn):
		host, request = 'api.pathofexile.com', '/leagues?type=main'
		jsonLeagues = mn.apiJSON(host, request)
		if not(jsonLeagues):
			return []
		_l("Got leagues Info…\n")
		lsLeague = []
		for idx, league in enumerate(jsonLeagues):
			lg_keys = tuple(league.keys())
			_d( ("ID: „", (f"{league['id']}", 'phr'), "”, Desc: „",
				(f"{league['description']}", 'phr'), "”\n",
				"  Start: ", (f"{dt_uiso(league['startAt'])}", 'phr'), "\n",
				"   Ends: ", (f"{dt_uiso(league['endAt'])}", 'phr'), "\n") )
			if 'registerAt' in lg_keys:
				_d( ("  Registerable from: ", (f"{dt_uiso(league['registerAt'])}", 'phr'), "\n") )
			_d( ("  Ladder: ", (f"{league['url']}", 'phr'), "\n") )
			if 'event' in lg_keys:
				_d( (f"  Is It Event?: ", (f"{_y(league['event'])}", 'phr'), "\n") )
			if 'delveEvent' in lg_keys:
				_d( (f"  Delving allowed?: ", (f"{_y(league['delveEvent'])}", 'phr'), "\n") )
			lsLeague.append(str(league['id']))
		return lsLeague

	def go_NvrsRelease(mn, b):
		user, repo = 'NeverSinkDev', 'NeverSink-Filter'
		#jsonLastRelease
		jsnLR = mn.githubJSON(user, repo)
		if not(jsnLR):
			return None
		rel_keys = tuple(jsnLR.keys())
		sep = f"{_n:–>80}"
		_l(sep)
		rel_v = str(jsnLR['tag_name'])
		_lp( ("Latest Neversink release(tag: ", (f"{rel_v}", 'num'), "): „",
			(f"{jsnLR['name']}", 'phr'), "”\n",
			"  url: ", (f"{jsnLR['html_url']}", 'fnm'), "\n",
			"  Created: ", (f"{jsnLR['created_at']}", 'phr'), "\n",
			"  Published: ", (f"{jsnLR['published_at']}", 'phr'), "\n") )
		txtO = ''
		txt1 = '  Description:\n'
		for desc_line in jsnLR['body'].splitlines():
			ln = desc_line.strip()
			if ln:
				txt1 += f"    {ln}\n"
		if txt1:
			txtO += txt1.join((sep,)*2)
		zip_fn = f"{repo}-{rel_v}.zip"
		tar_gz_fn = f"{repo}-{rel_v}.tar.gz"
		if 'zipball_url' in rel_keys and(jsnLR['zipball_url']):
			txtO += f"  Zip to download: {jsnLR['zipball_url']} → {zip_fn}\n"
		if 'tarball_url' in rel_keys and(jsnLR['tarball_url']):
			txtO += f"  Tar to download: {jsnLR['tarball_url']} → {tar_gz_fn}\n"
		#https://api.github.com/repos/NeverSinkDev/NeverSink-Filter/zipball/6.7
		#   ↓
		#https://github.com/NeverSinkDev/NeverSink-Filter/archive/6.7.zip
		frnd_url_base = f"https://github.com/NeverSinkDev/NeverSink-Filter/archive/{rel_v}"
		txtO += f"  Friendly Zip download: {frnd_url_base}.zip → {zip_fn}\n"
		txtO += f"  Friendly Tar download: {frnd_url_base}.tar.gz → {tar_gz_fn}\n"
		_l(txtO)
		if zip_fn==ph.basename(mn.cfg['Main']['ZipFN']):
			_l('Seems that you have proper zip file downloaded already.\n')
		else:
			_l('Seems that you need to download proper zip file.\n')
		_l('\n')

	def appUpdateFilename(mn, select, bUpEmptyTxt=True):
		trans = cfgFiles(select)
		if not(trans):
			return
		ui = mn.ui
		lastFN = mn.cfg['Main'][trans]
		lblDspl = getattr(ui, f"dspl{select}FN")
		if lastFN:
			lblDspl.set_text(lastFN.replace(ph.expanduser('~'), '~'))
		else:
			lblDspl.set_text(ui.txtFN)

	def appButtsLogic(mn):
		from os import access, W_OK
		ui = mn.ui
		lsCheck = []
		for select in file_types:
			trans = cfgFiles(select)
			cfgPath = mn.cfg['Main'][trans]
			if not(cfgPath):
				lsCheck.append(False)
				continue
			if select=='Out':
				path = ph.dirname(cfgPath)
				t = access(path, W_OK)
				lsCheck.append(t)
			else:
				lsCheck.append(ph.isfile(cfgPath))
		ui.buttConv.set_sensitive(all(lsCheck))
		zcfg = mn.cfg['Main'][cfgFiles('Zip')]
		icfg = mn.cfg['Main'][cfgFiles('In')]
		bUnZip = zcfg and(icfg) and(ph.isfile(zcfg)) and(ph.isdir(ph.dirname((icfg))))
		ui.buttUnZip.set_sensitive(bUnZip)
		dfcfg = [mn.cfg['Main'][cfgFiles(select)] for select in 'In Out'.split()]
		bDiff = all(dfcfg) and(all(ph.isfile(fn) for fn in dfcfg))
		ui.buttDiff.set_sensitive(bDiff)
		return True

	def appSetFileName(mn, select):
		ui = mn.ui
		trans = cfgFiles(select)
		if not(trans):
			return
		if not(mn.cfg['Main']['League'])\
			and(mn.cfg['Main']['ModName']) and(mn.cfg['Main']['Strictness']):
			_lp( (("Before setting filenames, set League name and other options bellow…\n", 'wrn'),) )
			return
		inputFN = mn.cfg['Main'][trans]
		lastDir = ph.dirname(inputFN) if inputFN else mn.ui.runpath
		fnFilter = (mn.ui.poeFilterZip, mn.ui.poeFilter)[select in('In', 'Out')]
		fjd = {'Zip':'unzip', 'In':'read', 'Out':'write'}[select]
		newFilename = ui.files.get_fn(startDir=lastDir, filters=(fnFilter,),
			title=(f"Select file to {fjd}" ),
			act=('file_open', 'file_save')[select=='Out'])
		if newFilename:
			mn.cfg['Main'][trans] = newFilename
			if select=='Zip':
				#master rename mode ;)
				mn.appUpdateFilenames()
		mn.appUpdateFilename(select)

	def badZip(mn, zip_fn):
			_lp( (("Error: Selected zip file „", 'err'), (hh(zip_fn), 'fnm'),
				("” can not be recognized!\n", 'err')) )

	def tstZip(mn):
		zip_fn = mn.cfg['Main']['ZipFN']
		if not(zip_fn):
			_l("Error: Select proper zip filename!\n", 'err')
			return None
		if (not(ph.isfile(zip_fn))):
			_lp( (("Error: Selected zip filename „", 'err'), (hh(zip_fn), 'fnm'),
				("” does not exist!\n", 'err')) )
			return None
		root_in_zip_dn = zt(zip_fn)[0]
		nm_dt = root_in_zip_dn[:-1].split('-')
		if root_in_zip_dn[-1]=='/' and(len(nm_dt)==3):
			filter_name, _, ver = nm_dt
			return filter_name, ver, root_in_zip_dn
		else:
			mn.badZip(zip_fn)
			return None

	def appUpdateFilenames(mn):
		cfgZip = mn.cfg['Main'][cfgFiles('Zip')]
		zip_dn = ph.dirname(cfgZip) if cfgZip else ''
		cfgIn = mn.cfg['Main'][cfgFiles('In')]
		in_dn = ph.dirname(cfgIn) if cfgIn else zip_dn
		cfgOut = mn.cfg['Main'][cfgFiles('Out')]
		out_dn = ph.dirname(cfgOut) if cfgOut else in_dn
		tst = mn.tstZip()
		if tst:
			filter_name, ver, _ = tst
			common_nm = '-'.join((ver, mn.cfg['Main']['League'], mn.cfg['Main']['Strictness']))
			if mn.cfg['Main']['Style']!='Default':
				common_nm += '-'+mn.cfg['Main']['Style']
			common_nm += '.filter'
			mn.cfg['Main'][cfgFiles('In')] = f"{in_dn}/{filter_name}-{common_nm}"
			mn.cfg['Main'][cfgFiles('Out')] = f"{out_dn}/{mn.cfg['Main']['ModName']}-{common_nm}"
			for select in 'In Out'.split():
				mn.appUpdateFilename(select)

	def appListZip(mn):
		zip_fn = mn.cfg['Main']['ZipFN']
		_lp( ("Zip file „", (hh(zip_fn), 'fnm'), "” has files:\n") )
		for fn in zip_files:
			_lp( ("„", (str(fn), 'fnm'), "”\n") )

	def go_UnZip(mn, b):
		tst = mn.tstZip()
		if tst:
			filter_name, ver, root_in_zip_dn = tst
			zip_fn = mn.cfg['Main']['ZipFN']
			extract_fn = root_in_zip_dn
			if mn.cfg['Main']['Style']!='Default':
				extract_fn += f"(STYLE) {mn.cfg['Main']['Style'].upper()}/"
			Strictness = mn.cfg['Main']['Strictness']
			if not(Strictness in Strictneses):
				mn.badZip()
				return
			strct_idx = Strictneses.index(Strictness)
			extract_fn += f"NeverSink's filter - {strct_idx:d}-{Strictness.upper()}"
			if mn.cfg['Main']['Style']!='Default':
				extract_fn += f" ({mn.cfg['Main']['Style']}) "
			extract_fn += ".filter"
			unzipped_fn = mn.cfg['Main']['InFN']
			zu(zip_fn, extract_fn, unzipped_fn)
			#Make sure Linux rules… :P
			CRLF, LF = b'\r\n',  b'\n'
			with open(unzipped_fn, 'rb') as crlf_fd:
				data = crlf_fd.read()
			with open(unzipped_fn, 'wb') as lf_fd:
				lf_fd.write(data.replace(CRLF, LF))
			_lp( ("Zip file:„", (zip_fn, 'fnm'), "” unpacked to:\n",
				"    „", (unzipped_fn, 'fnm'), "”\n") )

	def go_Convert(mn, b):
		from mySinkGo import sinkConvert
		sinkConvert(mn.cfg['Main']['InFN'], mn.cfg['Main']['OutFN'], mn.dbg, _lp, _d)

	def go_Diff(mn, b):
		from difflib import unified_diff as diffu
		old_fn = mn.cfg['Main']['InFN']
		new_fn = mn.cfg['Main']['OutFN']
		_l("Differences:\n")
		if not(old_fn) or(not(new_fn)):
			_l("– no both filenames set\n ")
			return
		cmph = ''
		cmph = ph.commonpath( (old_fn, new_fn) )
		if cmph:
			cmph += ph.sep
		dn = ph.dirname(old_fn)
		diff_fn = ph.join(dn, "Sink.diff")
		old_ld = new_ld = ''
		def get_ld(fn):
			with open(fn, 'r') as fd:
				return [ln.rstrip('\n') for ln in fd.read().splitlines()]
		old_ld = get_ld(old_fn)
		new_ld = get_ld(new_fn)
		if not(old_ld) or(not(new_ld)):
			_l("– no both files data\n ")
			return
		old_fn_, new_fn_ = (fn.replace(cmph, '') for fn in (old_fn, new_fn))
		diff4u = tuple(diffu(old_ld, new_ld, fromfile=old_fn_, tofile=new_fn_, lineterm=''))
		diff_dt = '\n'.join(diff4u)
		if not(diff_dt):
			_lp( ((f"old_ld", 'err'), "==", (f"new_ld", 'num'), ": ", (f"{old_ld==new_ld}\n", 'srf')) )
			return
		diff_dt += '\n'
		with open(diff_fn, 'w') as fd:
			fd.write(diff_dt)
		_lp( ((diff4u[0], 'err'), '\n', (diff4u[1], 'num'), ('\n[...]\n', 'srf')) )

	def appCfgLoad(mn, restoreGeo=True):
		ui = mn.ui
		mn.cfg = IniSections()
		cfg_fn = ph.join(mn.ui.runpath, ph.basename(__file__)+'.ini')
		if ph.isfile(cfg_fn):
			mn.cfg.load(cfg_fn)
			_p(f"Config file: '{cfg_fn}'\n")
		if not(mn.cfg.filename):
			mn.cfg.filename = cfg_fn
		mn.lastcfg = mn.cfg['Main'].copy(), mn.cfg['UI'].copy()
		if restoreGeo:
			ui.cfg = mn.cfg['UI']
			ui.restoreGeometry()
		mn.dbg = (mn.cfg['Main']['Debug']=='True')
		if not(mn.cfg['Main']['ModName']):
			mn.cfg['Main']['ModName'] = 'MySink'
		if not(mn.cfg['Main']['Style']):
			mn.cfg['Main']['Style'] = 'Default'
		if not(mn.cfg['Main']['Strictness']):
			mn.cfg['Main']['Strictness'] = 'Regular'
		ui.chkDbg.set_active(mn.dbg)

	def appCfgStore(mn):
		mn.ui.storeGeometry()
		mn.cfg['Main']['Debug'] = ('False', 'True')[mn.dbg]
		if mn.lastcfg!=(mn.cfg['Main'], mn.cfg['UI']):
			mn.cfg.section_place('Main', 0)
			mn.cfg.store()

	def appStart(mn):
		mn.appCfgLoad()
		for select in file_types:
			mn.appUpdateFilename(select, False)
		# Start time tick
		from uiMySinker import addTick
		mn.chkThr = addTick(1000, mn.appButtsLogic)

	def appStop(mn):
		mn.appCfgStore()
		# Stop time tick
		from uiMySinker import unWatch
		unWatch(mn.chkThr)

	def go_CloseEv(mn, w, e):
		mn.appStop()
		return False

	def go_Quit(mn, b):
		mn.appStop()
		mn.ui.Exit()

if __name__ == "__main__":
	mySinker()
